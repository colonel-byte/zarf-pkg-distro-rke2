---
# yaml-language-server: $schema=https://raw.githubusercontent.com/zarf-dev/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: distro-rke2
  version: "###ZARF_PKG_TMPL_VERSION###"
  source: https://github.com/colonel-byte/zarf-pkg-rke2
  annotations:
    org.opencontainers.image.source: "https://github.com/colonel-byte/zarf-pkg-rke2"
    org.opencontainers.image.description: Zarf package for deploying rke2
components:
  - name: binary
    required: true
    files:
      - source: target/rke2.linux-amd64.tar.gz
        extractPath: bin/rke2
        target: /var/lib/rancher/rke2/bin/rke2
        shasum: "###ZARF_PKG_TMPL_RKE2_SHA_AMD64###"
        executable: true
      - source: target/rke2.linux-amd64.tar.gz
        extractPath: bin/rke2-killall.sh
        target: /var/lib/rancher/rke2/bin/rke2-killall.sh
        executable: true
      - source: target/rke2.linux-amd64.tar.gz
        extractPath: bin/rke2-uninstall.sh
        target: /var/lib/rancher/rke2/bin/rke2-uninstall.sh
        executable: true
    only:
      cluster:
        architecture: amd64
    actions:
      onCreate:
        before:
          - cmd: |-
              rm -rf   target
              mkdir -p target
              echo https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2.linux-amd64.tar.gz
              curl -L -o ./target/rke2.linux-amd64.tar.gz https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2.linux-amd64.tar.gz
            description: pull rke2 tar-ball
      onDeploy:
        defaults:
          maxRetries: 5
        before:
          - cmd: if [ "$(uname -m)" != "x86_64" ]; then echo "this package architecture is amd64, but the target system has a different architecture. These architectures must be the same" && exit 1; fi
            description: Check that the host architecture matches the package architecture
            maxRetries: 0
          - cmd: ./zarf internal is-valid-hostname
            maxRetries: 0
            description: Check if the current system has a, RFC1123 compliant hostname
  - name: binary
    required: true
    files:
      - source: target/rke2.linux-arm64.tar.gz
        extractPath: bin/rke2
        target: /var/lib/rancher/rke2/bin/rke2
        shasum: "###ZARF_PKG_TMPL_RKE2_SHA_ARM64###"
        executable: true
      - source: target/rke2.linux-arm64.tar.gz
        extractPath: bin/rke2-killall.sh
        target: /var/lib/rancher/rke2/bin/rke2-killall.sh
        executable: true
      - source: target/rke2.linux-arm64.tar.gz
        extractPath: bin/rke2-uninstall.sh
        target: /var/lib/rancher/rke2/bin/rke2-uninstall.sh
        executable: true
    only:
      cluster:
        architecture: arm64
    actions:
      onCreate:
        before:
          - cmd: |-
              rm -rf   target
              mkdir -p target
              echo https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2.linux-arm64.tar.gz
              curl -L -o ./target/rke2.linux-arm64.tar.gz https://github.com/rancher/rke2/releases/download/###ZARF_PKG_TMPL_RKE2_VERSION###/rke2.linux-arm64.tar.gz
            description: pull rke2 tar-ball
      onDeploy:
        defaults:
          maxRetries: 5
        before:
          - cmd: if [ "$(uname -m)" != "aarch64" ] && [ "$(uname -m)" != "arm64" ]; then echo "this package architecture is arm64, but the target system has a different architecture. These architectures must be the same" && exit 1; fi
            description: Check that the host architecture matches the package architecture
            maxRetries: 0
          - cmd: ./zarf internal is-valid-hostname
            maxRetries: 0
            description: Check if the current system has a, RFC1123 compliant hostname
  - name: server
    required: false
    files:
      - source: target/rke2.linux-amd64.tar.gz
        extractPath: lib/systemd/system/rke2-server.service
        target: /etc/systemd/system/rke2-server.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/rke2-server.service
    actions:
      onDeploy:
        after:
          - cmd: systemctl daemon-reload
    only:
      cluster:
        architecture: amd64
  - name: agent
    required: false
    files:
      - source: target/rke2.linux-amd64.tar.gz
        extractPath: lib/systemd/system/rke2-agent.service
        target: /etc/systemd/system/rke2-agent.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/rke2-agent.service
    actions:
      onDeploy:
        after:
          - cmd: systemctl daemon-reload
    only:
      cluster:
        architecture: amd64
  - name: server
    required: false
    files:
      - source: target/rke2.linux-arm64.tar.gz
        extractPath: lib/systemd/system/rke2-server.service
        target: /etc/systemd/system/rke2-server.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/rke2-server.service
    actions:
      onDeploy:
        after:
          - cmd: systemctl daemon-reload
    only:
      cluster:
        architecture: arm64
  - name: agent
    required: false
    files:
      - source: target/rke2.linux-arm64.tar.gz
        extractPath: lib/systemd/system/rke2-agent.service
        target: /etc/systemd/system/rke2-agent.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/rke2-agent.service
    actions:
      onDeploy:
        after:
          - cmd: systemctl daemon-reload
    only:
      cluster:
        architecture: arm64
  - name: images
    required: true
    only:
      cluster:
        architecture: amd64
    files:
      - target: /var/lib/rancher/rke2/images
        source: ./target
    actions:
      onCreate:
        before:
          - description: pull images
            cmd: |-
              rm -rf ./target
              mkdir -p ./target
              echo ""
              for img in `cat ./files/images-core.linux-amd64.txt | sort`; do
                export TAR="$(echo $img | sed -E 's/\//_/g; s/:.+$//g').tar"
                echo "pulling $img"
                ./zarf tools registry pull  --platform "linux/amd64" $img ./target/$TAR
              done
  - name: images
    required: true
    only:
      cluster:
        architecture: arm64
    files:
      - target: /var/lib/rancher/rke2/images
        source: ./target
    actions:
      onCreate:
        before:
          - description: pull images
            cmd: |-
              rm -rf ./target
              mkdir -p ./target
              echo ""
              for img in `cat ./files/images-core.linux-arm64.txt | sort`; do
                export TAR="$(echo $img | sed -E 's/\//_/g; s/:.+$//g').tar"
                echo "pulling $img"
                ./zarf tools registry pull  --platform "linux/arm64" $img ./target/$TAR
              done
